// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: multiples/multiples.proto

package multiples

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplesClient is the client API for Multiples service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplesClient interface {
	// Sends a request to calculate multiplesTotal by looping through the total once
	CalculateMultiplesOneLoop(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (*MultiplesReply, error)
	// Sends a request to calculate multiplesTotal by looping through each multiple concurrently
	CalculateMultiplesConcurrent(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (*MultiplesReply, error)
}

type multiplesClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplesClient(cc grpc.ClientConnInterface) MultiplesClient {
	return &multiplesClient{cc}
}

func (c *multiplesClient) CalculateMultiplesOneLoop(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (*MultiplesReply, error) {
	out := new(MultiplesReply)
	err := c.cc.Invoke(ctx, "/multiples.Multiples/CalculateMultiplesOneLoop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiplesClient) CalculateMultiplesConcurrent(ctx context.Context, in *MultiplesRequest, opts ...grpc.CallOption) (*MultiplesReply, error) {
	out := new(MultiplesReply)
	err := c.cc.Invoke(ctx, "/multiples.Multiples/CalculateMultiplesConcurrent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiplesServer is the server API for Multiples service.
// All implementations must embed UnimplementedMultiplesServer
// for forward compatibility
type MultiplesServer interface {
	// Sends a request to calculate multiplesTotal by looping through the total once
	CalculateMultiplesOneLoop(context.Context, *MultiplesRequest) (*MultiplesReply, error)
	// Sends a request to calculate multiplesTotal by looping through each multiple concurrently
	CalculateMultiplesConcurrent(context.Context, *MultiplesRequest) (*MultiplesReply, error)
	mustEmbedUnimplementedMultiplesServer()
}

// UnimplementedMultiplesServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplesServer struct {
}

func (UnimplementedMultiplesServer) CalculateMultiplesOneLoop(context.Context, *MultiplesRequest) (*MultiplesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMultiplesOneLoop not implemented")
}
func (UnimplementedMultiplesServer) CalculateMultiplesConcurrent(context.Context, *MultiplesRequest) (*MultiplesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateMultiplesConcurrent not implemented")
}
func (UnimplementedMultiplesServer) mustEmbedUnimplementedMultiplesServer() {}

// UnsafeMultiplesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplesServer will
// result in compilation errors.
type UnsafeMultiplesServer interface {
	mustEmbedUnimplementedMultiplesServer()
}

func RegisterMultiplesServer(s grpc.ServiceRegistrar, srv MultiplesServer) {
	s.RegisterService(&Multiples_ServiceDesc, srv)
}

func _Multiples_CalculateMultiplesOneLoop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplesServer).CalculateMultiplesOneLoop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiples.Multiples/CalculateMultiplesOneLoop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplesServer).CalculateMultiplesOneLoop(ctx, req.(*MultiplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Multiples_CalculateMultiplesConcurrent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiplesServer).CalculateMultiplesConcurrent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiples.Multiples/CalculateMultiplesConcurrent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiplesServer).CalculateMultiplesConcurrent(ctx, req.(*MultiplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Multiples_ServiceDesc is the grpc.ServiceDesc for Multiples service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Multiples_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "multiples.Multiples",
	HandlerType: (*MultiplesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateMultiplesOneLoop",
			Handler:    _Multiples_CalculateMultiplesOneLoop_Handler,
		},
		{
			MethodName: "CalculateMultiplesConcurrent",
			Handler:    _Multiples_CalculateMultiplesConcurrent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multiples/multiples.proto",
}
